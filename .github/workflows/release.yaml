name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        # Check JavaScript syntax
        node -c voice-replay-card.js
        
        # Build project
        npm run build
        
        # Validate structure
        test -f voice-replay-card.js || (echo "voice-replay-card.js not found" && exit 1)
        test -f package.json || (echo "package.json not found" && exit 1)
        test -f hacs.json || (echo "hacs.json not found" && exit 1)
        test -f dist/voice-replay-card.js || (echo "Built file not found" && exit 1)
        
        # Validate JSON files
        jq empty package.json || (echo "Invalid package.json" && exit 1)
        jq empty hacs.json || (echo "Invalid hacs.json" && exit 1)
        
        echo "All tests passed"

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Validate version consistency
      run: |
        TAG_VERSION="${{ steps.get_version.outputs.version }}"
        PACKAGE_VERSION=$(jq -r '.version' package.json)
        
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Error: Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
          exit 1
        fi
        
        # Check card version
        if ! grep -q "CARD_VERSION = '$PACKAGE_VERSION'" voice-replay-card.js; then
          echo "Warning: Card version in voice-replay-card.js may not match package.json"
        fi

    - name: Create Release Notes
      id: release_notes
      run: |
        # Create release notes
        cat > release_notes.md << EOF
        ## Voice Replay Card v${{ steps.get_version.outputs.version }}
        
        ### Installation
        1. Download \`voice-replay-card.js\` from this release
        2. Place it in your \`www\` folder in Home Assistant
        3. Add the card resource in your Lovelace configuration:
           \`\`\`yaml
           resources:
             - url: /local/voice-replay-card.js
               type: module
           \`\`\`
        
        ### What's Changed
        * Updated to version ${{ steps.get_version.outputs.version }}
        * See commit history for detailed changes
        
        ### Home Assistant Compatibility
        * Requires Home Assistant 2023.1.0 or newer
        * Works with Voice Replay integration
        
        ### Files in this release
        * \`voice-replay-card.js\` - The main card file for installation
        EOF

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: Voice Replay Card ${{ steps.get_version.outputs.tag }}
        body_path: release_notes.md
        draft: true
        prerelease: false

    - name: Upload voice-replay-card.js
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/voice-replay-card.js
        asset_name: voice-replay-card.js
        asset_content_type: application/javascript

    - name: Upload package.json (for reference)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./package.json
        asset_name: package.json
        asset_content_type: application/json

    - name: Publish Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.create_release.outputs.id }},
            draft: false
          });
          
          console.log('Release published successfully!');