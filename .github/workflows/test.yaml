name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check JavaScript syntax
      run: node -c voice-replay-card.js

    - name: Build project
      run: npm run build

    - name: Validate build output
      run: |
        test -f dist/voice-replay-card.js || (echo "Built file not found" && exit 1)
        echo "Build output validation passed"

    - name: Validate package.json
      run: |
        # Validate JSON syntax and required fields using Node.js
        node -e "
          const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
          if (!pkg.name) throw new Error('Missing name field');
          if (!pkg.version) throw new Error('Missing version field');
          if (!pkg.scripts) throw new Error('Missing scripts field');
          console.log('✅ package.json validation passed');
        "

    - name: Check for security vulnerabilities
      run: npm audit --audit-level moderate

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint JavaScript
      run: |
        # Install ESLint if not present
        if ! npx eslint --version > /dev/null 2>&1; then
          npm install eslint --save-dev
        fi
        # Run basic linting
        npx eslint voice-replay-card.js --no-eslintrc --env browser --env es6 --parserOptions '{"ecmaVersion": 2020, "sourceType": "module"}' || echo "Linting completed with warnings"

  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate file structure
      run: |
        # Check required files exist
        test -f voice-replay-card.js || (echo "voice-replay-card.js not found" && exit 1)
        test -f package.json || (echo "package.json not found" && exit 1)
        test -f README.md || (echo "README.md not found" && exit 1)
        test -f hacs.json || (echo "hacs.json not found" && exit 1)
        echo "All required files present"

    - name: Validate HACS structure
      run: |
        # Check if hacs.json is valid JSON using Node.js
        node -e "JSON.parse(require('fs').readFileSync('hacs.json', 'utf8')); console.log('✅ HACS configuration is valid')"

    - name: Check card version consistency
      run: |
        # Extract version from package.json using Node.js
        PACKAGE_VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('package.json', 'utf8')).version)")
        echo "Package version: $PACKAGE_VERSION"
        
        # Check if version exists in voice-replay-card.js
        if ! grep -q "CARD_VERSION = '$PACKAGE_VERSION'" voice-replay-card.js; then
          echo "Warning: Card version in voice-replay-card.js may not match package.json"
          grep "CARD_VERSION" voice-replay-card.js || echo "CARD_VERSION not found"
        else
          echo "Card version is consistent"
        fi